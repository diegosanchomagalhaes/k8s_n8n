#!/bin/bash
set -e

echo "üìÇ Criando nova estrutura de diret√≥rios organizada..."

# Diret√≥rio base do cluster (hostPath para persist√™ncia)
CLUSTER_BASE="/home/dsm/cluster"
echo "üìÅ Base de dados: $CLUSTER_BASE"

# Criar estrutura de diret√≥rios (PostgreSQL + PVC hostPath, Redis local-path)
echo "üóÇÔ∏è Criando diret√≥rios base..."
sudo mkdir -p "$CLUSTER_BASE/postgresql"
sudo mkdir -p "$CLUSTER_BASE/postgresql/backup"
sudo mkdir -p "$CLUSTER_BASE/pvc"
sudo mkdir -p "$CLUSTER_BASE/pvc/backup"

echo "üèóÔ∏è Criando subdiret√≥rios para aplica√ß√µes..."

# Diret√≥rios espec√≠ficos do PostgreSQL
sudo mkdir -p "$CLUSTER_BASE/postgresql/data"
sudo mkdir -p "$CLUSTER_BASE/postgresql/backup/full"
sudo mkdir -p "$CLUSTER_BASE/postgresql/backup/n8n"
sudo mkdir -p "$CLUSTER_BASE/postgresql/backup/grafana"

# Diret√≥rios das aplica√ß√µes dentro de applications/ (organizado)
sudo mkdir -p "$CLUSTER_BASE/applications/n8n/config"
sudo mkdir -p "$CLUSTER_BASE/applications/n8n/files"
sudo mkdir -p "$CLUSTER_BASE/applications/grafana/data"
sudo mkdir -p "$CLUSTER_BASE/applications/grafana/logs"

# Diret√≥rio do Redis (seguindo o mesmo padr√£o do PostgreSQL)
sudo mkdir -p "$CLUSTER_BASE/redis"

# Definir permiss√µes adequadas (igual ao PostgreSQL que funciona)
echo "üîê Configurando permiss√µes..."
sudo chmod -R 777 "$CLUSTER_BASE"

# Definir permiss√µes espec√≠ficas para cada aplica√ß√£o
echo "üîß Ajustando permiss√µes espec√≠ficas das aplica√ß√µes..."
# PostgreSQL (UID 999) - mant√©m como est√°
sudo chown -R 999:999 "$CLUSTER_BASE/postgresql/data"
# Applications - usar permiss√µes abertas (777) para evitar problemas de UID
sudo chmod -R 777 "$CLUSTER_BASE/applications"
# Manter dono como dsm para poder apagar facilmente
sudo chown -R dsm:dsm "$CLUSTER_BASE/applications"
# Redis - usar permiss√µes adequadas (propriet√°rio dsm:dsm)
sudo chown -R dsm:dsm "$CLUSTER_BASE/redis"

# Verificar estrutura criada
echo "‚úÖ Estrutura criada com sucesso!"
echo ""
echo "üìã Nova estrutura de diret√≥rios:"
tree "$CLUSTER_BASE" 2>/dev/null || find "$CLUSTER_BASE" -type d | sort

echo ""
echo "üéØ Pr√≥ximos passos:"
echo "1. Execute o destroy da infraestrutura atual"
echo "2. Suba novamente com: ./infra/scripts/9.start-infra.sh"
echo "3. Deploy do n8n com: ./k8s/apps/n8n/scripts/1.deploy-n8n.sh"

echo ""
echo "üí° Os novos locais ser√£o:"
echo "   - PostgreSQL data: $CLUSTER_BASE/postgresql/data"
echo "   - PostgreSQL backups: $CLUSTER_BASE/postgresql/backup/"
echo "   - Redis data: $CLUSTER_BASE/redis (hostPath persistente)"
echo "   - n8n config: $CLUSTER_BASE/applications/n8n/config"
echo "   - n8n files: $CLUSTER_BASE/applications/n8n/files"
echo "   - Grafana data: $CLUSTER_BASE/applications/grafana/data"
echo "   - Grafana logs: $CLUSTER_BASE/applications/grafana/logs"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Para usar hostPath persistente:"
echo "   1. Configure o path em cada arquivo *-pv-hostpath.yaml.template"
echo "   2. Substitua [CLUSTER_BASE_PATH] por: $CLUSTER_BASE"
echo "   3. Use os scripts de deploy que aplicam os PVs hostPath"
echo ""
echo "üìã Estrat√©gia de persist√™ncia:"
echo "   ‚úÖ PostgreSQL: hostPath persistente (sobrevive ao destroy do cluster)"
echo "   ‚úÖ n8n: hostPath persistente (sobrevive ao destroy do cluster)"
echo "   ‚úÖ Grafana: hostPath persistente (sobrevive ao destroy do cluster)"
echo "   ‚ö†Ô∏è  Redis: local-path (cache - pode ser recriado)"