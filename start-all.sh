#!/bin/bash

# Script de conveni√™ncia para inicializar infraestrutura + aplica√ß√µes
# Para usar: ./start-all.sh [aplicacao]
# Exemplos:
#   ./start-all.sh          # Inicializa infra + todas as aplica√ß√µes
#   ./start-all.sh n8n      # Inicializa infra + somente n8n
#   ./start-all.sh grafana  # Inicializa infra + somente grafana
#   ./start-all.sh glpi     # Inicializa infra + somente glpi

echo "üöÄ Iniciando ambiente completo..."

# =================================================================
# 0. DEFINIR DIRET√ìRIO BASE DO PROJETO
# =================================================================
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

echo "üìÅ Diret√≥rio do projeto: $PROJECT_ROOT"
cd "$PROJECT_ROOT"

# Par√¢metro para aplica√ß√£o espec√≠fica
SPECIFIC_APP="$1"

# Lista de aplica√ß√µes dispon√≠veis
AVAILABLE_APPS=("n8n" "grafana" "glpi")

# =================================================================
# FUN√á√ÉO: VERIFICAR SE APLICA√á√ÉO TEM DADOS PERSISTENTES
# =================================================================
has_persistent_data() {
    local app_name="$1"
    local data_dir="/home/dsm/cluster/applications/$app_name"
    
    # Verificar se o diret√≥rio existe e n√£o est√° vazio
    if [ -d "$data_dir" ] && [ "$(ls -A "$data_dir" 2>/dev/null)" ]; then
        return 0  # Tem dados
    else
        return 1  # N√£o tem dados
    fi
}

# =================================================================
# FUN√á√ÉO: VERIFICAR SE APLICA√á√ÉO EXISTE NO CLUSTER
# =================================================================
check_app_exists() {
    local app_name="$1"
    
    # Verificar se o deployment existe no cluster
    if kubectl get deployment "$app_name" -n "$app_name" &>/dev/null; then
        return 0  # Existe
    else
        return 1  # N√£o existe
    fi
}

# =================================================================
# FUN√á√ÉO: CONFIGURAR HOSTS PARA UMA APLICA√á√ÉO
# =================================================================
setup_app_hosts() {
    local app_name="$1"
    local hosts_script="$PROJECT_ROOT/k8s/apps/$app_name/scripts/0.setup-hosts-$app_name.sh"
    
    if [ -f "$hosts_script" ]; then
        echo "üè† Configurando hosts para $app_name..."
        "$hosts_script" add
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Hosts configurado para $app_name"
            return 0
        else
            echo "‚ö†Ô∏è  Falha ao configurar hosts para $app_name"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  Script de hosts n√£o encontrado para $app_name: $hosts_script"
        return 0  # N√£o √© cr√≠tico, continua mesmo sem o script
    fi
}

# =================================================================
# FUN√á√ÉO: DEPLOY DE UMA APLICA√á√ÉO
# =================================================================
deploy_single_app() {
    local app_name="$1"
    local deploy_script="$PROJECT_ROOT/k8s/apps/$app_name/scripts/1.deploy-$app_name.sh"
    
    if [ -f "$deploy_script" ]; then
        echo "üì¶ Fazendo deploy do $app_name..."
        cd "$PROJECT_ROOT"
        "$deploy_script"
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ $app_name deployado com sucesso!"
            return 0
        else
            echo "‚ùå Falha no deploy do $app_name"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  Script de deploy n√£o encontrado para $app_name: $deploy_script"
        return 1
    fi
}

# =================================================================
# FUN√á√ÉO: INICIAR UMA APLICA√á√ÉO (COM L√ìGICA DE DADOS PERSISTENTES)
# =================================================================
start_single_app() {
    local app_name="$1"
    local start_script="$PROJECT_ROOT/k8s/apps/$app_name/scripts/3.start-$app_name.sh"
    
    echo ""
    echo "üîÑ Processando $app_name..."
    
    # Configurar entrada no hosts primeiro
    setup_app_hosts "$app_name"
    
    # Verificar se tem dados persistentes
    if has_persistent_data "$app_name"; then
        echo "üíæ Dados persistentes encontrados para $app_name"
        
        # Se tem dados, verifica se aplica√ß√£o existe no cluster
        if check_app_exists "$app_name"; then
            echo "üîÑ $app_name j√° deployado, apenas iniciando..."
            if [ -f "$start_script" ]; then
                "$start_script"
                if [ $? -eq 0 ]; then
                    echo "‚úÖ $app_name iniciado com dados existentes!"
                    return 0
                else
                    echo "‚ùå Falha ao iniciar $app_name"
                    return 1
                fi
            else
                echo "‚ö†Ô∏è  Script de start n√£o encontrado: $start_script"
                return 1
            fi
        else
            echo "üìã $app_name n√£o deployado no cluster, fazendo deploy com dados existentes..."
            if deploy_single_app "$app_name"; then
                echo "‚úÖ $app_name deployado e usando dados existentes!"
                return 0
            else
                return 1
            fi
        fi
    else
        echo "üìÇ Nenhum dado persistente encontrado para $app_name"
        echo "üöÄ Executando deploy completo do zero..."
        
        if deploy_single_app "$app_name"; then
            echo "‚úÖ $app_name deployado com sucesso (instala√ß√£o nova)!"
            return 0
        else
            return 1
        fi
    fi
}

# =================================================================
# 1. INICIAR INFRAESTRUTURA
# =================================================================
echo "üèóÔ∏è Passo 1: Infraestrutura base..."
"$PROJECT_ROOT/infra/scripts/10.start-infra.sh"

if [ $? -ne 0 ]; then
    echo "‚ùå Falha na inicializa√ß√£o da infraestrutura"
    exit 1
fi

echo ""
echo "‚úÖ Infraestrutura pronta!"
echo ""

# =================================================================
# 2. INICIAR APLICA√á√ïES
# =================================================================
if [ -n "$SPECIFIC_APP" ]; then
    # Verificar se a aplica√ß√£o espec√≠fica existe na lista
    if [[ " ${AVAILABLE_APPS[@]} " =~ " ${SPECIFIC_APP} " ]]; then
        echo "üì± Passo 2: Aplica√ß√£o espec√≠fica ($SPECIFIC_APP)..."
        start_single_app "$SPECIFIC_APP"
    else
        echo "‚ùå Aplica√ß√£o '$SPECIFIC_APP' n√£o encontrada!"
        echo "üìã Aplica√ß√µes dispon√≠veis: ${AVAILABLE_APPS[*]}"
        exit 1
    fi
else
    # Iniciar todas as aplica√ß√µes dispon√≠veis
    echo "üì± Passo 2: Todas as aplica√ß√µes..."
    for app in "${AVAILABLE_APPS[@]}"; do
        start_single_app "$app"
    done
fi

# =================================================================
# 3. RESUMO FINAL
# =================================================================
echo ""
echo "üéâ Ambiente completo pronto!"
echo ""
echo "üìã Componentes da infraestrutura:"
echo "   ‚úÖ k3d cluster"
echo "   ‚úÖ PostgreSQL"
echo "   ‚úÖ MariaDB"
echo "   ‚úÖ Redis"
echo "   ‚úÖ cert-manager"
echo ""
echo "üì± Aplica√ß√µes ativas:"

# Verificar quais aplica√ß√µes est√£o rodando
for app in "${AVAILABLE_APPS[@]}"; do
    if kubectl get pods -n "$app" 2>/dev/null | grep -q "Running"; then
        case "$app" in
            "n8n")
                echo "   ‚úÖ n8n - https://n8n.local.127.0.0.1.nip.io:8443"
                ;;
            "grafana")
                echo "   ‚úÖ grafana - https://grafana.local.127.0.0.1.nip.io:8443"
                ;;
            "glpi")
                echo "   ‚úÖ glpi - https://glpi.local.127.0.0.1.nip.io:8443"
                ;;
            *)
                echo "   ‚úÖ $app"
                ;;
        esac
    else
        echo "   ‚è∏Ô∏è  $app (n√£o rodando)"
    fi
done

echo ""
echo "üí° Para iniciar aplica√ß√µes espec√≠ficas:"
echo "   ./start-all.sh n8n      # Somente n8n"
echo "   ./start-all.sh grafana  # Somente grafana"
echo "   ./start-all.sh glpi     # Somente glpi"
echo ""
echo "üîÑ Comportamento inteligente:"
echo "   ‚Ä¢ Se existem dados em /home/dsm/cluster/applications/[app]/ ‚Üí Preserva dados existentes"
echo "   ‚Ä¢ Se n√£o existem dados ‚Üí Deploy completo do zero"
echo "   ‚Ä¢ Dados sempre persistem entre destrui√ß√µes de cluster"
echo ""