apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      securityContext:
        fsGroup: 65534 # nobody group for Prometheus
      initContainers:
        - name: create-database
          image: postgres:16
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: prometheus-db-secret
                  key: DB_POSTGRESDB_HOST
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: prometheus-db-secret
                  key: DB_POSTGRESDB_PORT
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: prometheus-db-secret
                  key: DB_POSTGRESDB_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prometheus-db-secret
                  key: DB_POSTGRESDB_PASSWORD
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER; do
                echo "Waiting for database connection..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              echo "Creating database 'prometheus' if it doesn't exist..."
              psql -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'prometheus'" | grep -q 1 || psql -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "CREATE DATABASE prometheus"
              echo "Database setup complete!"
        - name: fix-permissions
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Fixing permissions for Prometheus directories..."
              chown -R 65534:65534 /prometheus /etc/prometheus
              chmod -R 755 /prometheus /etc/prometheus
              echo "Permissions fixed!"
          volumeMounts:
            - name: prometheus-data
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus
          securityContext:
            runAsUser: 0
        - name: setup-config
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Setting up Prometheus configuration..."
              if [ ! -f /etc/prometheus/prometheus.yml ]; then
                cat > /etc/prometheus/prometheus.yml << 'EOF'
              global:
                scrape_interval: 15s
                evaluation_interval: 15s
                external_labels:
                  cluster: 'k3d-cluster'
                  environment: 'local'

              rule_files:
                # - "first_rules.yml"
                # - "second_rules.yml"

              scrape_configs:
                - job_name: 'prometheus'
                  static_configs:
                    - targets: ['localhost:9090']
                
                - job_name: 'kubernetes-apiservers'
                  kubernetes_sd_configs:
                    - role: endpoints
                  scheme: https
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                      action: keep
                      regex: default;kubernetes;https

                - job_name: 'kubernetes-nodes'
                  kubernetes_sd_configs:
                    - role: node
                  scheme: https
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  relabel_configs:
                    - action: labelmap
                      regex: __meta_kubernetes_node_label_(.+)

                - job_name: 'kubernetes-pods'
                  kubernetes_sd_configs:
                    - role: pod
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                      action: keep
                      regex: true
                    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                      action: replace
                      target_label: __metrics_path__
                      regex: (.+)
                    - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                      action: replace
                      regex: ([^:]+)(?::\d+)?;(\d+)
                      replacement: $1:$2
                      target_label: __address__
                    - action: labelmap
                      regex: __meta_kubernetes_pod_label_(.+)
                    - source_labels: [__meta_kubernetes_namespace]
                      action: replace
                      target_label: kubernetes_namespace
                    - source_labels: [__meta_kubernetes_pod_name]
                      action: replace
                      target_label: kubernetes_pod_name

                - job_name: 'kubernetes-services'
                  kubernetes_sd_configs:
                    - role: endpoints
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                      action: keep
                      regex: true
                    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                      action: replace
                      target_label: __scheme__
                      regex: (https?)
                    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                      action: replace
                      target_label: __metrics_path__
                      regex: (.+)
                    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                      action: replace
                      target_label: __address__
                      regex: ([^:]+)(?::\d+)?;(\d+)
                      replacement: $1:$2
                    - action: labelmap
                      regex: __meta_kubernetes_service_label_(.+)
                    - source_labels: [__meta_kubernetes_namespace]
                      action: replace
                      target_label: kubernetes_namespace
                    - source_labels: [__meta_kubernetes_service_name]
                      action: replace
                      target_label: kubernetes_name
              EOF
                echo "Default configuration created!"
              else
                echo "Configuration already exists!"
              fi
              chown 65534:65534 /etc/prometheus/prometheus.yml
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v3.6.0
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
          ports:
            - containerPort: 9090
              name: http
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=30d"
            - "--storage.tsdb.retention.size=15GB"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--web.enable-lifecycle"
            - "--web.enable-admin-api"
            - "--web.external-url=https://prometheus.local.127.0.0.1.nip.io"
            - "--web.route-prefix=/"
          env:
            # Redis cache configuration (optional for metrics caching)
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: prometheus-db-secret
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: prometheus-db-secret
                  key: REDIS_PORT
            - name: REDIS_DB
              valueFrom:
                secretKeyRef:
                  name: prometheus-db-secret
                  key: REDIS_DB
          resources:
            requests:
              cpu: "150m"
              memory: "300Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          volumeMounts:
            - name: prometheus-data
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus
          livenessProbe:
            httpGet:
              path: /
              port: 9090
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: prometheus-config
          persistentVolumeClaim:
            claimName: prometheus-config-pvc
